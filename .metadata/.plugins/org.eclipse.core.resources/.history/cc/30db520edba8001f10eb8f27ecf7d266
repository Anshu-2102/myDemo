package com.cg.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cg.entity.Order;

import com.cg.exception.BadRequestException;
import com.cg.exception.ResourceNotFoundException;
import com.cg.service.IOrderService;
import com.cg.service.OrderFeignClient;


@RestController
@RequestMapping("/order")
public class OrderController {
	@Autowired
	IOrderService orderService;
	
	@Autowired
	OrderFeignClient feignClient;
	@GetMapping("/orderlist")
	public List<Order> getAllOrder(Order o)
	{
		
		return orderService.findAll();
	}
	
//	@GetMapping("/find/{id}")
//	public Optional<Order> findOrdersById(@PathVariable int id)
//	{
//		return orderService.findOrderById(id);
//	}
	@GetMapping("/products1/{id}")
	Optional<Order>findByProductIdFromDBWithException(@PathVariable int id) throws ResourceNotFoundException
	{	Optional<Order> order = orderService.findOrderById(id);
    	order.orElseThrow(() -> new ResourceNotFoundException("Product not found for this id :: " + id));
    	System.out.println(id);
    return order;	
	}
	
//	@PostMapping("/create")
//	public Order createOrders(@RequestBody Order o)
//	{
//		return orderService.createOrder(o);
//	}
	
	@PostMapping("/create")
	public Order createOrders(@RequestBody Order o) throws BadRequestException
	{
		if(o==null||o.getOrderNo()==null||o.getDate()==null||o.getDate()==""||o.getOrderNo()=="")
		{
			throw new BadRequestException("invalid order data");
		}
		return orderService.createOrder(o);
	}
	
	
	@DeleteMapping("/delete/{id}")
	public String delete(@PathVariable int id) throws ResourceNotFoundException
	{
		Optional<Order> order = orderService.findOrderById(id);
    	order.orElseThrow(() -> new ResourceNotFoundException("Order not found for this id :: " + id));
		orderService.deleteOrder(id);
		return "deleted";
	}
	                     
    
	@PutMapping("/update")
	public Order update(@RequestBody Order o) throws BadRequestException
	{
		if(o==null||o.getOrderNo()==null||o.getDate()==null||o.getDate()==""||o.getOrderNo()=="")
		{
			throw new BadRequestException("invalid order data, cannot update");
		}
		return orderService.update(o);
	}
	
	@GetMapping("/allproducts") //http://localhost:7100/api/dept/allemp
	public  ResponseEntity<String> getEmployees() {
	 return ResponseEntity.ok().body(feignClient.getResponse());
	}
	
}
